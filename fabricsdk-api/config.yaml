# 网络名称
name: "datatransfercc-network"

# Describe what the target network is/does.
description: "The network which will host data trabsfer cc network"


#指定版本
version: 2

#客户端定义
client:
  # 客户端所属的组织，必须是organizations定义的组织
  organization: org1
  #定义日志服务
  logging:
    level: debug #debug级别

  # peer、事件服务、orderer超时的全局配置
  # 本部分如果忽略，使用下列的值作为默认值
  peer:
    timeout:
      connection: 10s
      response: 180s
      discovery:
        greylistExpiry: 10s
  eventService:
    timeout:
      registrationResponse: 15s
  orderer:
    timeout:
      connection: 15s
      response: 15s
  global:
    timeout:
      query: 180s
      execute: 180s
      resmgmt: 180s
    cache:
      connectionIdle: 30s
      eventServiceIdle: 2m
      channelConfig: 30m
      channelMembership: 30s
      discovery: 10s
      selection: 10m

  # MSP根目录
  cryptoconfig:
    path: ${GOPATH}/src/github.com/hyperledger/fabric/AssetExchange/deploy/crypto-config

  # 某些SDK支持插件化的KV数据库, 通过指定credentialStore属性实现
  credentialStore:
    # 可选，用于用户证书材料存储，如果所有的证书材料被嵌入到配置文件，则不需要
    path: "/tmp/state-store"

    # 可选，指定Go SDK实现的CryptoSuite实现
    cryptoStore:
      # 指定用于加密密钥存储的底层KV数据库
      path: /tmp/msp

    # 客户端的BCCSP模块配置
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # 可选，当连接到peers，orderes时使用系统证书池，默认为false
    systemCertPool: true

    # 可选，客户端和peers与orderes进行TLS握手的密钥和证书
    client:
      key:
        path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.key
      cert:
        path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.crt


# 如果应用程序创建了通道，不需要本部分
channels:
  # 如果没有定义channel配置或是定义的channel没有信息，使用默认channel
  # 如果channel没有定义peers，使用默认channel的peers
  # 如果channel没有定义orderes，使用默认channel的orderes
  # 如果channel没有定义背书策略，使用默认channel的背书策略
  # 如果channel定义了背书策略，但某些背书策略缺失，缺失的背书策略会被默认channel填充
  _default:
    # 可选，参与组织的peers列表
    peers:
      peer1.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # 可选，应用程序使用下列选项执行通道操作，如获取通道配置
    policies:
      #可选，获取通道配置区块
      queryChannelConfig:
        #可选，成功响应节点的最小数量
        minResponses: 1
        # 可选
        maxTargets: 1
        # 可选，查询配置区块的重试选项
        retryOpts:
          # 可选，重试次数
          attempts: 5
          # 可选， 第一次重试的后退间隔
          initialBackoff: 500ms
          # 可选， 重试的最大后退间隔
          maxBackoff: 5s
          backoffFactor: 2.0
      # 可选，获取发现信息选项
      discovery:
        maxTargets: 2
        # 重试选项
        retryOpts:
          # 可选，重试次数
          attempts: 4
          initialBackoff: 500ms
          maxBackoff: 5s
          backoffFactor: 2.0

      # 可选，事件服务选项
      eventService:
        # 可选 resolverStrategy指定连接到peer节点时选择peer节点的决策策略
        # 可选值:PreferOrg（默认）, MinBlockHeight, Balanced
        # PreferOrg:
        #   基于区块高度滞后阀值决定哪些peer节点是合适的， 虽然会在当前组织中优先选择peer节点
        #   如果当前组织中没有合适的peer节点，会从其它组织中选取
        # MinBlockHeight:
        #   根据区块高度滞后阀值选择最好的peer节点，
        #   所有peer节点的最大区块高度是确定的，区块高度小于最大区块高度但在滞后阀值范围内的peer节点会被加载，
        #   其它peer节点不会被考虑。
        # Balanced:
        #   使用配置的balancer选择peer节点
        resolverStrategy: PreferOrg

        # 可选 balancer是选择连接到peer节点的负载均衡器
        # 可选值: Random (default), RoundRobin
        balancer: Random

        # 可选，blockHeightLagThreshold设置区块高度滞后阀值，用于选择连接到的peer节点
        # 如果一个peer节点滞后于最新的peer节点给定的区块数，会被排除在选择之外
        # 注意：当minBlockHeightResolverMode设置为ResolveByThreshold时，本参数才可用
        # 默认: 5
        blockHeightLagThreshold: 5

        # 可选，reconnectBlockHeightLagThreshold - 如果peer节点的区块高度落后于指定的区块数量，
        # 事件客户端会从peer节点断开，重新连接到一个性能更好的peer节点
        # 如果peerMonitor设置为启用（默认），本参数才可用
        # 默认值: 10
        # 注意：设置值太低会导致事件客户端频繁断开或重连，影响性能
        reconnectBlockHeightLagThreshold: 8

        # 可选， peerMonitorPeriod是事件客户端从连接节点断开重新连接到另外一个节点的时间
        # 默认: 对于Balanced resolverStrategy禁用，为0; 对于PreferOrg和MinBlockHeight为5s
        peerMonitorPeriod: 6s

  #如果_default没有定义，必选；如果_default已经定义，可选。
  # 通道名称
  assetchannel:
    # 如果_default peers没有定义，必选；如果_default peers已经定义，可选。
    # 参与组织的peer节点列表
    peers:
      peer0.org1.example.com:
        # 可选。peer节点是否会被发送交易提议只进行查询。peer节点必须安装链码。
        # 应用程序还可以使用本属性来决定发送链码安装的请求到哪个peer节点。默认值：true
        endorsingPeer: true

        # 可选。peer节点必须安装链码。peer节点是否会被发送交易提案只进行查询。
        # 应用程序还可以使用本属性来决定发送链码安装的请求到哪个peer节点。默认值：true
        chaincodeQuery: true

        # 可选。是否可以向peer节点发送不会进行链码查询的提案，如queryBlock（），
        # queryTransaction（）等。默认值：true。
        ledgerQuery: true

        # 可选。peer节点是否为SDK事件监听器注册的目标，所有的peer节点都可以生产事件，
        # 但通常只需要连接一个对事件进行监听。默认值：true。
        eventSource: true

# Fabric区块链网络中参与的组织列表
organizations:
  org1:
    mspid: Org1MSP
    # 组织的MSP存储位置，绝对路径或相对cryptoconfig的路径
    cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp
    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com
    # 可选，证书颁发机构签发×××明，Fabric-CA是一个特殊的证书管理机构，提供REST API支持动态证书管理，如登记、撤销、重新登记
    # 下列部分只为Fabric-CA服务器设置
    certificateAuthorities:
      - ca.org1.example.com

  org2:
    mspid: Org2MSP

    # 组织的MSP存储位置，相对于cryptoconfig的相对位置或绝对路径
    cryptoPath:  peerOrganizations/org2.example.com/users/{username}@org2.example.com/msp
    peers:
      - peer0.org2.example.com
    certificateAuthorities:
      - ca.org2.example.com

  # Orderer组织名称
  ordererorg:
    # 组织的MSPID
    mspID: OrdererMSP
    # 加载用户需要的密钥和证书，绝对路径或相对路径
    cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp

# 发送交易请求或通道创建、更新请求到的orderers列表
# 如果定义了超过一个orderer，SDK使用哪一个orderer由代码实现时指定
orderers:
  # orderer节点，可以定义多个
  orderer.example.com:
    url: orderer.example.com:7050
    # 以下属性由gRPC库定义，会被传递给gRPC客户端构造函数
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      # 下列参数用于设置服务器上的keepalive策略，不兼容的设置会导致连接关闭
      # 当keep-alive-time被设置为0或小于激活客户端的参数，下列参数失效
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false

    tlsCACerts:
      # 证书的绝对路径
      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

# peers节点列表
peers:
  # peer节点定义，可以定义多个
  peer0.org1.example.com:
    # URL用于发送背书和查询请求
    url: peer0.org1.example.com:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false

    tlsCACerts:
      # 证书的绝对路径
      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

# Fabric-CA是Hyperledger Fabric提供了特殊的证书颁发机构，可以通过REST API管理证书。
# 应用程序可以选择使用一个标准的证书颁发机构代替Fabric-CA，此时本部分不需要指定
certificateAuthorities:
  # CA机构，可以定义多个
  ca.org1.example.com:
    url: https://ca.org1.example.com:7054
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
      # 客户端和Fabric CA进行SSL握手的密钥和证书
      client:
        key:
          path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.key
        cert:
          path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/${CRYPTOCONFIG_FIXTURES_PATH}/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.crt

    # Fabric-CA支持通过REST API进行动态用户注册
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # 可选，CA机构名称
    caName: ca.org1.example.com
